Recommended naming conventions for TS & JS:
	•	Folders / files: prefer kebab-case (all-lowercase with hyphens) → e.g. trap-rain-water.ts, two-sum.js.
	•	Reason: portable on case-insensitive filesystems; easy to read; common in Node repos.
	•	Variables / functions: camelCase
	•	Classes / types / interfaces / enums: PascalCase
	•	Constants: UPPER_SNAKE_CASE
	•	Tests (if/when you add): name.test.ts / name.test.js

Run mesurements for TS & JS:
# 直接运行 TypeScript（会向上查找根的 node_modules）
npx tsx trap-rain-water.ts
# 或者（同效果）
node --loader tsx trap-rain-water.ts

cd Problems/TrapRainWater/js
node trap-rain-water.js



Recommended naming conventions for Java:
•	Packages / folders / files: packages all-lowercase, dot-separated; folders mirror packages; files = PublicClassName.java → e.g. package com.example.ds.stack → src/main/java/com/example/ds/stack/LinkedListStack.java
•	Reason: package⇄directory alignment; portability on case-insensitive filesystems; standard across Java tooling
•	Variables / methods: camelCase
•	Classes / interfaces / enums / annotations: PascalCase
•	Constants: UPPER_SNAKE_CASE (static final), e.g. DEFAULT_TIMEOUT_MS
•	Tests (if/when you add): FooBarTest.java under src/test/java mirroring package (e.g. com.example.ds.stack.LinkedListStackTest)

Recommended naming conventions for Python:
•	Folders / files: packages lowercase (underscores OK); modules lowercase_with_underscores → e.g. data_structures/linked_list_stack.py
•	Reason: PEP 8 readability and import friendliness across OS/filesystems
•	Variables / functions: snake_case
•	Classes / types / exceptions: PascalCase (exceptions usually end with Error)
•	Constants: UPPER_SNAKE_CASE at module level, e.g. DEFAULT_TIMEOUT = 5
•	Tests (if/when you add): tests/test_name.py (pytest) or name_test.py (unittest)



Recommended naming conventions for Scala:
•	Packages / folders / files: packages all-lowercase, dot-separated; folders mirror packages; files = PublicTypeName.scala → e.g. package com.example.ds.stack → src/main/scala/com/example/ds/stack/LinkedListStack.scala
•	Reason: package⇄directory alignment; standard SBT layout; smooth tooling (scalac/IDE) and JVM interop
•	Variables / methods: camelCase
•	Classes / traits / objects / enums: PascalCase (e.g. class LinkedListStack, trait Stack, object AppMain, enum Color)
•	Constants: UPPER_SNAKE_CASE for compile-time constants in an object/companion (final val), e.g. MAX_SIZE = 1024
•	Type parameters / type aliases: single caps or short caps (T, A, K, V), type aliases in PascalCase (e.g. type UserId = Int)
•	Tests (if/when you add): FooBarSpec.scala under src/test/scala mirroring package (e.g. com.example.ds.stack.LinkedListStackSpec)